
dummy.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Größe     VMA       LMA       Datei-Off Ausr.
  0 .text         00000b78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000b78  00000c0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800080  00800080  00000c2c  2**0
                  ALLOC
  3 .stab         00001320  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f26  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002e72  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002e84  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  8a:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <initADC>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdio.h>


void initADC(){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	ADMUX = (1<<REFS0) | 0x01;
  9a:	87 e2       	ldi	r24, 0x27	; 39
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	21 e4       	ldi	r18, 0x41	; 65
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	ADCSRA = (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  a4:	86 e2       	ldi	r24, 0x26	; 38
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	27 e2       	ldi	r18, 0x27	; 39
  aa:	fc 01       	movw	r30, r24
  ac:	20 83       	st	Z, r18
}
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <startADC>:

void startADC(){
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADEN) | (1<<ADSC);
  bc:	86 e2       	ldi	r24, 0x26	; 38
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	26 e2       	ldi	r18, 0x26	; 38
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	f9 01       	movw	r30, r18
  c6:	20 81       	ld	r18, Z
  c8:	20 6c       	ori	r18, 0xC0	; 192
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <stopADC>:

void stopADC(){
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &= ~((1<<ADEN) | (1<<ADSC) | (1<<ADIE));
  dc:	86 e2       	ldi	r24, 0x26	; 38
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	26 e2       	ldi	r18, 0x26	; 38
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	20 81       	ld	r18, Z
  e8:	27 73       	andi	r18, 0x37	; 55
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <main>:

#include "uart.h"
#include "sampling.h"


int main(){
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	c2 50       	subi	r28, 0x02	; 2
  fe:	d1 40       	sbci	r29, 0x01	; 1
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61

	sampleBufferStruct sampleBuffer;

	initUART();
 10a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <initUART>
	printf("Start up\n\r");
 10e:	8e e6       	ldi	r24, 0x6E	; 110
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	89 2f       	mov	r24, r25
 114:	8f 93       	push	r24
 116:	8e e6       	ldi	r24, 0x6E	; 110
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	8f 93       	push	r24
 11c:	0e 94 ef 02 	call	0x5de	; 0x5de <printf>
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
	initSampling(&sampleBuffer);
 124:	ce 01       	movw	r24, r28
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	0e 94 b7 00 	call	0x16e	; 0x16e <initSampling>

	DDRA = 0x01;
 12c:	8a e3       	ldi	r24, 0x3A	; 58
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
	PORTA = 0x01;
 136:	8b e3       	ldi	r24, 0x3B	; 59
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18

	startSampling();
 140:	0e 94 f7 00 	call	0x1ee	; 0x1ee <startSampling>

	while(1){
		printf("%d;\n\r",popSample(&sampleBuffer));
 144:	ce 01       	movw	r24, r28
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	0e 94 60 01 	call	0x2c0	; 0x2c0 <popSample>
 14c:	29 2f       	mov	r18, r25
 14e:	2f 93       	push	r18
 150:	8f 93       	push	r24
 152:	89 e7       	ldi	r24, 0x79	; 121
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	89 2f       	mov	r24, r25
 158:	8f 93       	push	r24
 15a:	89 e7       	ldi	r24, 0x79	; 121
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	8f 93       	push	r24
 160:	0e 94 ef 02 	call	0x5de	; 0x5de <printf>
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
	}
 16c:	eb cf       	rjmp	.-42     	; 0x144 <main+0x50>

0000016e <initSampling>:

static sampleBufferStruct *__sampleBuffer;
static uint32_t __sampleSum = 0;
static uint16_t __sampleSumNumber = 0;

void initSampling(sampleBufferStruct *buffer){
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	00 d0       	rcall	.+0      	; 0x174 <initSampling+0x6>
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 178:	9a 83       	std	Y+2, r25	; 0x02
 17a:	89 83       	std	Y+1, r24	; 0x01
	buffer->readPos = 0;
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	9a 81       	ldd	r25, Y+2	; 0x02
 180:	93 95       	inc	r25
 182:	fc 01       	movw	r30, r24
 184:	10 82       	st	Z, r1
	buffer->writePos = 0;
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	9a 81       	ldd	r25, Y+2	; 0x02
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	9e 4f       	sbci	r25, 0xFE	; 254
 18e:	fc 01       	movw	r30, r24
 190:	10 82       	st	Z, r1
	__sampleBuffer = buffer;
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	9a 81       	ldd	r25, Y+2	; 0x02
 196:	90 93 81 00 	sts	0x0081, r25
 19a:	80 93 80 00 	sts	0x0080, r24

	//ADC init
	ADMUX = (1<<REFS0) | 0x01;										//read chanel 1 with AVCC as ref
 19e:	87 e2       	ldi	r24, 0x27	; 39
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	21 e4       	ldi	r18, 0x41	; 65
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 83       	st	Z, r18
	ADCSRA = (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);		//ADC clock = F_CPU / 128 auto triggered(self)
 1a8:	86 e2       	ldi	r24, 0x26	; 38
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	27 e2       	ldi	r18, 0x27	; 39
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18

	//Timer init
	TCCR1A = 0x00;
 1b2:	8f e4       	ldi	r24, 0x4F	; 79
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	fc 01       	movw	r30, r24
 1b8:	10 82       	st	Z, r1
	TCNT1 = 0x00;
 1ba:	8c e4       	ldi	r24, 0x4C	; 76
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	fc 01       	movw	r30, r24
 1c0:	11 82       	std	Z+1, r1	; 0x01
 1c2:	10 82       	st	Z, r1
	TCCR1B = (1<<WGM12);
 1c4:	8e e4       	ldi	r24, 0x4E	; 78
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	28 e0       	ldi	r18, 0x08	; 8
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
	OCR1A = 2048;
 1ce:	8a e4       	ldi	r24, 0x4A	; 74
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	38 e0       	ldi	r19, 0x08	; 8
 1d6:	fc 01       	movw	r30, r24
 1d8:	31 83       	std	Z+1, r19	; 0x01
 1da:	20 83       	st	Z, r18
	TIMSK = 0x00;
 1dc:	89 e5       	ldi	r24, 0x59	; 89
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	fc 01       	movw	r30, r24
 1e2:	10 82       	st	Z, r1
}
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <startSampling>:

int8_t startSampling(){
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62

	//static values init
	__sampleSum = 0;
 1f6:	10 92 82 00 	sts	0x0082, r1
 1fa:	10 92 83 00 	sts	0x0083, r1
 1fe:	10 92 84 00 	sts	0x0084, r1
 202:	10 92 85 00 	sts	0x0085, r1
	__sampleSumNumber = 0;
 206:	10 92 87 00 	sts	0x0087, r1
 20a:	10 92 86 00 	sts	0x0086, r1
	__sampleBuffer->readPos = 0;
 20e:	80 91 80 00 	lds	r24, 0x0080
 212:	90 91 81 00 	lds	r25, 0x0081
 216:	93 95       	inc	r25
 218:	fc 01       	movw	r30, r24
 21a:	10 82       	st	Z, r1
	__sampleBuffer->writePos = 0;
 21c:	80 91 80 00 	lds	r24, 0x0080
 220:	90 91 81 00 	lds	r25, 0x0081
 224:	8f 5f       	subi	r24, 0xFF	; 255
 226:	9e 4f       	sbci	r25, 0xFE	; 254
 228:	fc 01       	movw	r30, r24
 22a:	10 82       	st	Z, r1

	//ADC start
	ADCSRA |= (1<<ADEN) | (1<<ADSC);
 22c:	86 e2       	ldi	r24, 0x26	; 38
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	26 e2       	ldi	r18, 0x26	; 38
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	f9 01       	movw	r30, r18
 236:	20 81       	ld	r18, Z
 238:	20 6c       	ori	r18, 0xC0	; 192
 23a:	fc 01       	movw	r30, r24
 23c:	20 83       	st	Z, r18

	//Timer start
	TCCR1B |= (1<<CS10);
 23e:	8e e4       	ldi	r24, 0x4E	; 78
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	2e e4       	ldi	r18, 0x4E	; 78
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	f9 01       	movw	r30, r18
 248:	20 81       	ld	r18, Z
 24a:	21 60       	ori	r18, 0x01	; 1
 24c:	fc 01       	movw	r30, r24
 24e:	20 83       	st	Z, r18
	TIMSK |= (1<<OCIE1A);
 250:	89 e5       	ldi	r24, 0x59	; 89
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	29 e5       	ldi	r18, 0x59	; 89
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	f9 01       	movw	r30, r18
 25a:	20 81       	ld	r18, Z
 25c:	20 61       	ori	r18, 0x10	; 16
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18
	SREG |= (1<<7);
 262:	8f e5       	ldi	r24, 0x5F	; 95
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	2f e5       	ldi	r18, 0x5F	; 95
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	f9 01       	movw	r30, r18
 26c:	20 81       	ld	r18, Z
 26e:	20 68       	ori	r18, 0x80	; 128
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18

	return 0;
 274:	80 e0       	ldi	r24, 0x00	; 0
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <stopSampling>:

void stopSampling(){
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
	//Stop ADC
	ADCSRA &= ~((1<<ADEN) | (1<<ADSC) | (1<<ADIE));
 284:	86 e2       	ldi	r24, 0x26	; 38
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	26 e2       	ldi	r18, 0x26	; 38
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	f9 01       	movw	r30, r18
 28e:	20 81       	ld	r18, Z
 290:	27 73       	andi	r18, 0x37	; 55
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18

	//Stop Timer
	TCCR1B &= ~(1<<CS10);
 296:	8e e4       	ldi	r24, 0x4E	; 78
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	2e e4       	ldi	r18, 0x4E	; 78
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	f9 01       	movw	r30, r18
 2a0:	20 81       	ld	r18, Z
 2a2:	2e 7f       	andi	r18, 0xFE	; 254
 2a4:	fc 01       	movw	r30, r24
 2a6:	20 83       	st	Z, r18
	TIMSK &= ~(1<<OCIE1A);
 2a8:	89 e5       	ldi	r24, 0x59	; 89
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	29 e5       	ldi	r18, 0x59	; 89
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	f9 01       	movw	r30, r18
 2b2:	20 81       	ld	r18, Z
 2b4:	2f 7e       	andi	r18, 0xEF	; 239
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 83       	st	Z, r18
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <popSample>:

uint16_t popSample(sampleBufferStruct *buffer){
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <popSample+0x6>
 2c6:	00 d0       	rcall	.+0      	; 0x2c8 <popSample+0x8>
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	9c 83       	std	Y+4, r25	; 0x04
 2ce:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t data;
	//Wait till new samples are in
	while(buffer->readPos == buffer->writePos);
 2d0:	00 00       	nop
 2d2:	8b 81       	ldd	r24, Y+3	; 0x03
 2d4:	9c 81       	ldd	r25, Y+4	; 0x04
 2d6:	93 95       	inc	r25
 2d8:	fc 01       	movw	r30, r24
 2da:	20 81       	ld	r18, Z
 2dc:	8b 81       	ldd	r24, Y+3	; 0x03
 2de:	9c 81       	ldd	r25, Y+4	; 0x04
 2e0:	8f 5f       	subi	r24, 0xFF	; 255
 2e2:	9e 4f       	sbci	r25, 0xFE	; 254
 2e4:	fc 01       	movw	r30, r24
 2e6:	80 81       	ld	r24, Z
 2e8:	28 17       	cp	r18, r24
 2ea:	99 f3       	breq	.-26     	; 0x2d2 <popSample+0x12>

	data = buffer->samples[buffer->readPos];
 2ec:	8b 81       	ldd	r24, Y+3	; 0x03
 2ee:	9c 81       	ldd	r25, Y+4	; 0x04
 2f0:	93 95       	inc	r25
 2f2:	fc 01       	movw	r30, r24
 2f4:	80 81       	ld	r24, Z
 2f6:	88 2f       	mov	r24, r24
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	2b 81       	ldd	r18, Y+3	; 0x03
 2fc:	3c 81       	ldd	r19, Y+4	; 0x04
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	82 0f       	add	r24, r18
 304:	93 1f       	adc	r25, r19
 306:	fc 01       	movw	r30, r24
 308:	80 81       	ld	r24, Z
 30a:	91 81       	ldd	r25, Z+1	; 0x01
 30c:	9a 83       	std	Y+2, r25	; 0x02
 30e:	89 83       	std	Y+1, r24	; 0x01
	buffer->readPos = (buffer->readPos + 1) % 128;
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	9c 81       	ldd	r25, Y+4	; 0x04
 314:	93 95       	inc	r25
 316:	fc 01       	movw	r30, r24
 318:	80 81       	ld	r24, Z
 31a:	88 2f       	mov	r24, r24
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	8f 77       	andi	r24, 0x7F	; 127
 322:	90 78       	andi	r25, 0x80	; 128
 324:	99 23       	and	r25, r25
 326:	24 f4       	brge	.+8      	; 0x330 <popSample+0x70>
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	9f 6f       	ori	r25, 0xFF	; 255
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	28 2f       	mov	r18, r24
 332:	8b 81       	ldd	r24, Y+3	; 0x03
 334:	9c 81       	ldd	r25, Y+4	; 0x04
 336:	93 95       	inc	r25
 338:	fc 01       	movw	r30, r24
 33a:	20 83       	st	Z, r18

	return data;
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	9a 81       	ldd	r25, Y+2	; 0x02
}
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <pushSample>:

void pushSample(sampleBufferStruct *buffer, uint16_t data){
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	00 d0       	rcall	.+0      	; 0x354 <pushSample+0x6>
 354:	00 d0       	rcall	.+0      	; 0x356 <pushSample+0x8>
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
 35a:	9a 83       	std	Y+2, r25	; 0x02
 35c:	89 83       	std	Y+1, r24	; 0x01
 35e:	7c 83       	std	Y+4, r23	; 0x04
 360:	6b 83       	std	Y+3, r22	; 0x03
	buffer->samples[buffer->writePos] = data;
 362:	89 81       	ldd	r24, Y+1	; 0x01
 364:	9a 81       	ldd	r25, Y+2	; 0x02
 366:	8f 5f       	subi	r24, 0xFF	; 255
 368:	9e 4f       	sbci	r25, 0xFE	; 254
 36a:	fc 01       	movw	r30, r24
 36c:	80 81       	ld	r24, Z
 36e:	88 2f       	mov	r24, r24
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	29 81       	ldd	r18, Y+1	; 0x01
 374:	3a 81       	ldd	r19, Y+2	; 0x02
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	82 0f       	add	r24, r18
 37c:	93 1f       	adc	r25, r19
 37e:	2b 81       	ldd	r18, Y+3	; 0x03
 380:	3c 81       	ldd	r19, Y+4	; 0x04
 382:	fc 01       	movw	r30, r24
 384:	31 83       	std	Z+1, r19	; 0x01
 386:	20 83       	st	Z, r18
	buffer->writePos = (buffer->writePos + 1) % 128;
 388:	89 81       	ldd	r24, Y+1	; 0x01
 38a:	9a 81       	ldd	r25, Y+2	; 0x02
 38c:	8f 5f       	subi	r24, 0xFF	; 255
 38e:	9e 4f       	sbci	r25, 0xFE	; 254
 390:	fc 01       	movw	r30, r24
 392:	80 81       	ld	r24, Z
 394:	88 2f       	mov	r24, r24
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	8f 77       	andi	r24, 0x7F	; 127
 39c:	90 78       	andi	r25, 0x80	; 128
 39e:	99 23       	and	r25, r25
 3a0:	24 f4       	brge	.+8      	; 0x3aa <pushSample+0x5c>
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	80 68       	ori	r24, 0x80	; 128
 3a6:	9f 6f       	ori	r25, 0xFF	; 255
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	28 2f       	mov	r18, r24
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	9a 81       	ldd	r25, Y+2	; 0x02
 3b0:	8f 5f       	subi	r24, 0xFF	; 255
 3b2:	9e 4f       	sbci	r25, 0xFE	; 254
 3b4:	fc 01       	movw	r30, r24
 3b6:	20 83       	st	Z, r18
}
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <__vector_6>:

ISR(TIMER1_COMPA_vect){
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	00 90 5f 00 	lds	r0, 0x005F
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	2f 93       	push	r18
 3d4:	3f 93       	push	r19
 3d6:	4f 93       	push	r20
 3d8:	5f 93       	push	r21
 3da:	6f 93       	push	r22
 3dc:	7f 93       	push	r23
 3de:	8f 93       	push	r24
 3e0:	9f 93       	push	r25
 3e2:	af 93       	push	r26
 3e4:	bf 93       	push	r27
 3e6:	ef 93       	push	r30
 3e8:	ff 93       	push	r31
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	26 97       	sbiw	r28, 0x06	; 6
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	cd bf       	out	0x3d, r28	; 61
	uint16_t value;
	__sampleSumNumber++;
 3f8:	80 91 86 00 	lds	r24, 0x0086
 3fc:	90 91 87 00 	lds	r25, 0x0087
 400:	01 96       	adiw	r24, 0x01	; 1
 402:	90 93 87 00 	sts	0x0087, r25
 406:	80 93 86 00 	sts	0x0086, r24
	__sampleSum += ADC;
 40a:	84 e2       	ldi	r24, 0x24	; 36
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	fc 01       	movw	r30, r24
 410:	80 81       	ld	r24, Z
 412:	91 81       	ldd	r25, Z+1	; 0x01
 414:	9c 01       	movw	r18, r24
 416:	40 e0       	ldi	r20, 0x00	; 0
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	80 91 82 00 	lds	r24, 0x0082
 41e:	90 91 83 00 	lds	r25, 0x0083
 422:	a0 91 84 00 	lds	r26, 0x0084
 426:	b0 91 85 00 	lds	r27, 0x0085
 42a:	82 0f       	add	r24, r18
 42c:	93 1f       	adc	r25, r19
 42e:	a4 1f       	adc	r26, r20
 430:	b5 1f       	adc	r27, r21
 432:	80 93 82 00 	sts	0x0082, r24
 436:	90 93 83 00 	sts	0x0083, r25
 43a:	a0 93 84 00 	sts	0x0084, r26
 43e:	b0 93 85 00 	sts	0x0085, r27
	if(__sampleSumNumber == 900){
 442:	80 91 86 00 	lds	r24, 0x0086
 446:	90 91 87 00 	lds	r25, 0x0087
 44a:	84 38       	cpi	r24, 0x84	; 132
 44c:	93 40       	sbci	r25, 0x03	; 3
 44e:	49 f5       	brne	.+82     	; 0x4a2 <__stack+0x43>
		value = __sampleSum / (uint32_t)900;
 450:	80 91 82 00 	lds	r24, 0x0082
 454:	90 91 83 00 	lds	r25, 0x0083
 458:	a0 91 84 00 	lds	r26, 0x0084
 45c:	b0 91 85 00 	lds	r27, 0x0085
 460:	24 e8       	ldi	r18, 0x84	; 132
 462:	33 e0       	ldi	r19, 0x03	; 3
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	bc 01       	movw	r22, r24
 46a:	cd 01       	movw	r24, r26
 46c:	0e 94 cd 02 	call	0x59a	; 0x59a <__udivmodsi4>
 470:	da 01       	movw	r26, r20
 472:	c9 01       	movw	r24, r18
 474:	9a 83       	std	Y+2, r25	; 0x02
 476:	89 83       	std	Y+1, r24	; 0x01
		pushSample(__sampleBuffer, value);
 478:	80 91 80 00 	lds	r24, 0x0080
 47c:	90 91 81 00 	lds	r25, 0x0081
 480:	29 81       	ldd	r18, Y+1	; 0x01
 482:	3a 81       	ldd	r19, Y+2	; 0x02
 484:	b9 01       	movw	r22, r18
 486:	0e 94 a7 01 	call	0x34e	; 0x34e <pushSample>
		__sampleSumNumber = 0;
 48a:	10 92 87 00 	sts	0x0087, r1
 48e:	10 92 86 00 	sts	0x0086, r1
		__sampleSum = 0;
 492:	10 92 82 00 	sts	0x0082, r1
 496:	10 92 83 00 	sts	0x0083, r1
 49a:	10 92 84 00 	sts	0x0084, r1
 49e:	10 92 85 00 	sts	0x0085, r1
	}
}
 4a2:	26 96       	adiw	r28, 0x06	; 6
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	bf 91       	pop	r27
 4b8:	af 91       	pop	r26
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	7f 91       	pop	r23
 4c0:	6f 91       	pop	r22
 4c2:	5f 91       	pop	r21
 4c4:	4f 91       	pop	r20
 4c6:	3f 91       	pop	r19
 4c8:	2f 91       	pop	r18
 4ca:	0f 90       	pop	r0
 4cc:	00 92 5f 00 	sts	0x005F, r0
 4d0:	0f 90       	pop	r0
 4d2:	1f 90       	pop	r1
 4d4:	18 95       	reti

000004d6 <initUART>:
#include <avr/io.h>
#include <stdio.h>

static FILE myStream = FDEV_SETUP_STREAM(uartPutChar, uartGetChar, _FDEV_SETUP_RW);

void initUART(){
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
	UCSRA = 0x00;
 4de:	8b e2       	ldi	r24, 0x2B	; 43
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	fc 01       	movw	r30, r24
 4e4:	10 82       	st	Z, r1
	UCSRB = (1<<RXEN) | (1<<TXEN);
 4e6:	8a e2       	ldi	r24, 0x2A	; 42
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	28 e1       	ldi	r18, 0x18	; 24
 4ec:	fc 01       	movw	r30, r24
 4ee:	20 83       	st	Z, r18
	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
 4f0:	80 e4       	ldi	r24, 0x40	; 64
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	26 e8       	ldi	r18, 0x86	; 134
 4f6:	fc 01       	movw	r30, r24
 4f8:	20 83       	st	Z, r18
	UBRRH = 0x00;
 4fa:	80 e4       	ldi	r24, 0x40	; 64
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	fc 01       	movw	r30, r24
 500:	10 82       	st	Z, r1
	UBRRL = 0x03;
 502:	89 e2       	ldi	r24, 0x29	; 41
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	23 e0       	ldi	r18, 0x03	; 3
 508:	fc 01       	movw	r30, r24
 50a:	20 83       	st	Z, r18

	stdout = &myStream;
 50c:	80 e6       	ldi	r24, 0x60	; 96
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	90 93 8b 00 	sts	0x008B, r25
 514:	80 93 8a 00 	sts	0x008A, r24
	stdin = &myStream;
 518:	80 e6       	ldi	r24, 0x60	; 96
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	90 93 89 00 	sts	0x0089, r25
 520:	80 93 88 00 	sts	0x0088, r24
}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	08 95       	ret

0000052a <uartPutChar>:

int uartPutChar(char c, FILE *stream){
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	00 d0       	rcall	.+0      	; 0x530 <uartPutChar+0x6>
 530:	1f 92       	push	r1
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	89 83       	std	Y+1, r24	; 0x01
 538:	7b 83       	std	Y+3, r23	; 0x03
 53a:	6a 83       	std	Y+2, r22	; 0x02
	UDR = c;
 53c:	8c e2       	ldi	r24, 0x2C	; 44
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	29 81       	ldd	r18, Y+1	; 0x01
 542:	fc 01       	movw	r30, r24
 544:	20 83       	st	Z, r18
	while(!(UCSRA & (1<<UDRE)));
 546:	00 00       	nop
 548:	8b e2       	ldi	r24, 0x2B	; 43
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	fc 01       	movw	r30, r24
 54e:	80 81       	ld	r24, Z
 550:	88 2f       	mov	r24, r24
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	80 72       	andi	r24, 0x20	; 32
 556:	99 27       	eor	r25, r25
 558:	89 2b       	or	r24, r25
 55a:	b1 f3       	breq	.-20     	; 0x548 <uartPutChar+0x1e>
	return 0;
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	90 e0       	ldi	r25, 0x00	; 0
}
 560:	0f 90       	pop	r0
 562:	0f 90       	pop	r0
 564:	0f 90       	pop	r0
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <uartGetChar>:

char uartGetChar(FILE *stream){
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	00 d0       	rcall	.+0      	; 0x572 <uartGetChar+0x6>
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	9a 83       	std	Y+2, r25	; 0x02
 578:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA & (1<<RXC)));
 57a:	00 00       	nop
 57c:	8b e2       	ldi	r24, 0x2B	; 43
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	fc 01       	movw	r30, r24
 582:	80 81       	ld	r24, Z
 584:	88 23       	and	r24, r24
 586:	d4 f7       	brge	.-12     	; 0x57c <uartGetChar+0x10>
	return UDR;
 588:	8c e2       	ldi	r24, 0x2C	; 44
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	fc 01       	movw	r30, r24
 58e:	80 81       	ld	r24, Z
}
 590:	0f 90       	pop	r0
 592:	0f 90       	pop	r0
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	08 95       	ret

0000059a <__udivmodsi4>:
 59a:	a1 e2       	ldi	r26, 0x21	; 33
 59c:	1a 2e       	mov	r1, r26
 59e:	aa 1b       	sub	r26, r26
 5a0:	bb 1b       	sub	r27, r27
 5a2:	fd 01       	movw	r30, r26
 5a4:	0d c0       	rjmp	.+26     	; 0x5c0 <__udivmodsi4_ep>

000005a6 <__udivmodsi4_loop>:
 5a6:	aa 1f       	adc	r26, r26
 5a8:	bb 1f       	adc	r27, r27
 5aa:	ee 1f       	adc	r30, r30
 5ac:	ff 1f       	adc	r31, r31
 5ae:	a2 17       	cp	r26, r18
 5b0:	b3 07       	cpc	r27, r19
 5b2:	e4 07       	cpc	r30, r20
 5b4:	f5 07       	cpc	r31, r21
 5b6:	20 f0       	brcs	.+8      	; 0x5c0 <__udivmodsi4_ep>
 5b8:	a2 1b       	sub	r26, r18
 5ba:	b3 0b       	sbc	r27, r19
 5bc:	e4 0b       	sbc	r30, r20
 5be:	f5 0b       	sbc	r31, r21

000005c0 <__udivmodsi4_ep>:
 5c0:	66 1f       	adc	r22, r22
 5c2:	77 1f       	adc	r23, r23
 5c4:	88 1f       	adc	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	1a 94       	dec	r1
 5ca:	69 f7       	brne	.-38     	; 0x5a6 <__udivmodsi4_loop>
 5cc:	60 95       	com	r22
 5ce:	70 95       	com	r23
 5d0:	80 95       	com	r24
 5d2:	90 95       	com	r25
 5d4:	9b 01       	movw	r18, r22
 5d6:	ac 01       	movw	r20, r24
 5d8:	bd 01       	movw	r22, r26
 5da:	cf 01       	movw	r24, r30
 5dc:	08 95       	ret

000005de <printf>:
 5de:	a0 e0       	ldi	r26, 0x00	; 0
 5e0:	b0 e0       	ldi	r27, 0x00	; 0
 5e2:	e5 ef       	ldi	r30, 0xF5	; 245
 5e4:	f2 e0       	ldi	r31, 0x02	; 2
 5e6:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__prologue_saves__+0x20>
 5ea:	ae 01       	movw	r20, r28
 5ec:	4b 5f       	subi	r20, 0xFB	; 251
 5ee:	5f 4f       	sbci	r21, 0xFF	; 255
 5f0:	fa 01       	movw	r30, r20
 5f2:	61 91       	ld	r22, Z+
 5f4:	71 91       	ld	r23, Z+
 5f6:	af 01       	movw	r20, r30
 5f8:	80 91 8a 00 	lds	r24, 0x008A
 5fc:	90 91 8b 00 	lds	r25, 0x008B
 600:	0e 94 05 03 	call	0x60a	; 0x60a <vfprintf>
 604:	e2 e0       	ldi	r30, 0x02	; 2
 606:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__epilogue_restores__+0x20>

0000060a <vfprintf>:
 60a:	ac e0       	ldi	r26, 0x0C	; 12
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	eb e0       	ldi	r30, 0x0B	; 11
 610:	f3 e0       	ldi	r31, 0x03	; 3
 612:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__prologue_saves__>
 616:	7c 01       	movw	r14, r24
 618:	6b 01       	movw	r12, r22
 61a:	8a 01       	movw	r16, r20
 61c:	fc 01       	movw	r30, r24
 61e:	17 82       	std	Z+7, r1	; 0x07
 620:	16 82       	std	Z+6, r1	; 0x06
 622:	83 81       	ldd	r24, Z+3	; 0x03
 624:	81 ff       	sbrs	r24, 1
 626:	bd c1       	rjmp	.+890    	; 0x9a2 <vfprintf+0x398>
 628:	ce 01       	movw	r24, r28
 62a:	01 96       	adiw	r24, 0x01	; 1
 62c:	4c 01       	movw	r8, r24
 62e:	f7 01       	movw	r30, r14
 630:	93 81       	ldd	r25, Z+3	; 0x03
 632:	f6 01       	movw	r30, r12
 634:	93 fd       	sbrc	r25, 3
 636:	85 91       	lpm	r24, Z+
 638:	93 ff       	sbrs	r25, 3
 63a:	81 91       	ld	r24, Z+
 63c:	6f 01       	movw	r12, r30
 63e:	88 23       	and	r24, r24
 640:	09 f4       	brne	.+2      	; 0x644 <vfprintf+0x3a>
 642:	ab c1       	rjmp	.+854    	; 0x99a <vfprintf+0x390>
 644:	85 32       	cpi	r24, 0x25	; 37
 646:	39 f4       	brne	.+14     	; 0x656 <vfprintf+0x4c>
 648:	93 fd       	sbrc	r25, 3
 64a:	85 91       	lpm	r24, Z+
 64c:	93 ff       	sbrs	r25, 3
 64e:	81 91       	ld	r24, Z+
 650:	6f 01       	movw	r12, r30
 652:	85 32       	cpi	r24, 0x25	; 37
 654:	29 f4       	brne	.+10     	; 0x660 <vfprintf+0x56>
 656:	b7 01       	movw	r22, r14
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 ed 04 	call	0x9da	; 0x9da <fputc>
 65e:	e7 cf       	rjmp	.-50     	; 0x62e <vfprintf+0x24>
 660:	51 2c       	mov	r5, r1
 662:	31 2c       	mov	r3, r1
 664:	20 e0       	ldi	r18, 0x00	; 0
 666:	20 32       	cpi	r18, 0x20	; 32
 668:	a0 f4       	brcc	.+40     	; 0x692 <vfprintf+0x88>
 66a:	8b 32       	cpi	r24, 0x2B	; 43
 66c:	69 f0       	breq	.+26     	; 0x688 <vfprintf+0x7e>
 66e:	30 f4       	brcc	.+12     	; 0x67c <vfprintf+0x72>
 670:	80 32       	cpi	r24, 0x20	; 32
 672:	59 f0       	breq	.+22     	; 0x68a <vfprintf+0x80>
 674:	83 32       	cpi	r24, 0x23	; 35
 676:	69 f4       	brne	.+26     	; 0x692 <vfprintf+0x88>
 678:	20 61       	ori	r18, 0x10	; 16
 67a:	2c c0       	rjmp	.+88     	; 0x6d4 <vfprintf+0xca>
 67c:	8d 32       	cpi	r24, 0x2D	; 45
 67e:	39 f0       	breq	.+14     	; 0x68e <vfprintf+0x84>
 680:	80 33       	cpi	r24, 0x30	; 48
 682:	39 f4       	brne	.+14     	; 0x692 <vfprintf+0x88>
 684:	21 60       	ori	r18, 0x01	; 1
 686:	26 c0       	rjmp	.+76     	; 0x6d4 <vfprintf+0xca>
 688:	22 60       	ori	r18, 0x02	; 2
 68a:	24 60       	ori	r18, 0x04	; 4
 68c:	23 c0       	rjmp	.+70     	; 0x6d4 <vfprintf+0xca>
 68e:	28 60       	ori	r18, 0x08	; 8
 690:	21 c0       	rjmp	.+66     	; 0x6d4 <vfprintf+0xca>
 692:	27 fd       	sbrc	r18, 7
 694:	27 c0       	rjmp	.+78     	; 0x6e4 <vfprintf+0xda>
 696:	30 ed       	ldi	r19, 0xD0	; 208
 698:	38 0f       	add	r19, r24
 69a:	3a 30       	cpi	r19, 0x0A	; 10
 69c:	78 f4       	brcc	.+30     	; 0x6bc <vfprintf+0xb2>
 69e:	26 ff       	sbrs	r18, 6
 6a0:	06 c0       	rjmp	.+12     	; 0x6ae <vfprintf+0xa4>
 6a2:	fa e0       	ldi	r31, 0x0A	; 10
 6a4:	5f 9e       	mul	r5, r31
 6a6:	30 0d       	add	r19, r0
 6a8:	11 24       	eor	r1, r1
 6aa:	53 2e       	mov	r5, r19
 6ac:	13 c0       	rjmp	.+38     	; 0x6d4 <vfprintf+0xca>
 6ae:	8a e0       	ldi	r24, 0x0A	; 10
 6b0:	38 9e       	mul	r3, r24
 6b2:	30 0d       	add	r19, r0
 6b4:	11 24       	eor	r1, r1
 6b6:	33 2e       	mov	r3, r19
 6b8:	20 62       	ori	r18, 0x20	; 32
 6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <vfprintf+0xca>
 6bc:	8e 32       	cpi	r24, 0x2E	; 46
 6be:	21 f4       	brne	.+8      	; 0x6c8 <vfprintf+0xbe>
 6c0:	26 fd       	sbrc	r18, 6
 6c2:	6b c1       	rjmp	.+726    	; 0x99a <vfprintf+0x390>
 6c4:	20 64       	ori	r18, 0x40	; 64
 6c6:	06 c0       	rjmp	.+12     	; 0x6d4 <vfprintf+0xca>
 6c8:	8c 36       	cpi	r24, 0x6C	; 108
 6ca:	11 f4       	brne	.+4      	; 0x6d0 <vfprintf+0xc6>
 6cc:	20 68       	ori	r18, 0x80	; 128
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <vfprintf+0xca>
 6d0:	88 36       	cpi	r24, 0x68	; 104
 6d2:	41 f4       	brne	.+16     	; 0x6e4 <vfprintf+0xda>
 6d4:	f6 01       	movw	r30, r12
 6d6:	93 fd       	sbrc	r25, 3
 6d8:	85 91       	lpm	r24, Z+
 6da:	93 ff       	sbrs	r25, 3
 6dc:	81 91       	ld	r24, Z+
 6de:	6f 01       	movw	r12, r30
 6e0:	81 11       	cpse	r24, r1
 6e2:	c1 cf       	rjmp	.-126    	; 0x666 <vfprintf+0x5c>
 6e4:	98 2f       	mov	r25, r24
 6e6:	9f 7d       	andi	r25, 0xDF	; 223
 6e8:	95 54       	subi	r25, 0x45	; 69
 6ea:	93 30       	cpi	r25, 0x03	; 3
 6ec:	28 f4       	brcc	.+10     	; 0x6f8 <vfprintf+0xee>
 6ee:	0c 5f       	subi	r16, 0xFC	; 252
 6f0:	1f 4f       	sbci	r17, 0xFF	; 255
 6f2:	ff e3       	ldi	r31, 0x3F	; 63
 6f4:	f9 83       	std	Y+1, r31	; 0x01
 6f6:	0d c0       	rjmp	.+26     	; 0x712 <vfprintf+0x108>
 6f8:	83 36       	cpi	r24, 0x63	; 99
 6fa:	31 f0       	breq	.+12     	; 0x708 <vfprintf+0xfe>
 6fc:	83 37       	cpi	r24, 0x73	; 115
 6fe:	71 f0       	breq	.+28     	; 0x71c <vfprintf+0x112>
 700:	83 35       	cpi	r24, 0x53	; 83
 702:	09 f0       	breq	.+2      	; 0x706 <vfprintf+0xfc>
 704:	5b c0       	rjmp	.+182    	; 0x7bc <vfprintf+0x1b2>
 706:	22 c0       	rjmp	.+68     	; 0x74c <vfprintf+0x142>
 708:	f8 01       	movw	r30, r16
 70a:	80 81       	ld	r24, Z
 70c:	89 83       	std	Y+1, r24	; 0x01
 70e:	0e 5f       	subi	r16, 0xFE	; 254
 710:	1f 4f       	sbci	r17, 0xFF	; 255
 712:	44 24       	eor	r4, r4
 714:	43 94       	inc	r4
 716:	51 2c       	mov	r5, r1
 718:	54 01       	movw	r10, r8
 71a:	15 c0       	rjmp	.+42     	; 0x746 <vfprintf+0x13c>
 71c:	38 01       	movw	r6, r16
 71e:	f2 e0       	ldi	r31, 0x02	; 2
 720:	6f 0e       	add	r6, r31
 722:	71 1c       	adc	r7, r1
 724:	f8 01       	movw	r30, r16
 726:	a0 80       	ld	r10, Z
 728:	b1 80       	ldd	r11, Z+1	; 0x01
 72a:	26 ff       	sbrs	r18, 6
 72c:	03 c0       	rjmp	.+6      	; 0x734 <vfprintf+0x12a>
 72e:	65 2d       	mov	r22, r5
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	02 c0       	rjmp	.+4      	; 0x738 <vfprintf+0x12e>
 734:	6f ef       	ldi	r22, 0xFF	; 255
 736:	7f ef       	ldi	r23, 0xFF	; 255
 738:	c5 01       	movw	r24, r10
 73a:	2c 87       	std	Y+12, r18	; 0x0c
 73c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <strnlen>
 740:	2c 01       	movw	r4, r24
 742:	83 01       	movw	r16, r6
 744:	2c 85       	ldd	r18, Y+12	; 0x0c
 746:	2f 77       	andi	r18, 0x7F	; 127
 748:	22 2e       	mov	r2, r18
 74a:	17 c0       	rjmp	.+46     	; 0x77a <vfprintf+0x170>
 74c:	38 01       	movw	r6, r16
 74e:	f2 e0       	ldi	r31, 0x02	; 2
 750:	6f 0e       	add	r6, r31
 752:	71 1c       	adc	r7, r1
 754:	f8 01       	movw	r30, r16
 756:	a0 80       	ld	r10, Z
 758:	b1 80       	ldd	r11, Z+1	; 0x01
 75a:	26 ff       	sbrs	r18, 6
 75c:	03 c0       	rjmp	.+6      	; 0x764 <vfprintf+0x15a>
 75e:	65 2d       	mov	r22, r5
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	02 c0       	rjmp	.+4      	; 0x768 <vfprintf+0x15e>
 764:	6f ef       	ldi	r22, 0xFF	; 255
 766:	7f ef       	ldi	r23, 0xFF	; 255
 768:	c5 01       	movw	r24, r10
 76a:	2c 87       	std	Y+12, r18	; 0x0c
 76c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <strnlen_P>
 770:	2c 01       	movw	r4, r24
 772:	2c 85       	ldd	r18, Y+12	; 0x0c
 774:	20 68       	ori	r18, 0x80	; 128
 776:	22 2e       	mov	r2, r18
 778:	83 01       	movw	r16, r6
 77a:	23 fc       	sbrc	r2, 3
 77c:	1b c0       	rjmp	.+54     	; 0x7b4 <vfprintf+0x1aa>
 77e:	83 2d       	mov	r24, r3
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	48 16       	cp	r4, r24
 784:	59 06       	cpc	r5, r25
 786:	b0 f4       	brcc	.+44     	; 0x7b4 <vfprintf+0x1aa>
 788:	b7 01       	movw	r22, r14
 78a:	80 e2       	ldi	r24, 0x20	; 32
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 ed 04 	call	0x9da	; 0x9da <fputc>
 792:	3a 94       	dec	r3
 794:	f4 cf       	rjmp	.-24     	; 0x77e <vfprintf+0x174>
 796:	f5 01       	movw	r30, r10
 798:	27 fc       	sbrc	r2, 7
 79a:	85 91       	lpm	r24, Z+
 79c:	27 fe       	sbrs	r2, 7
 79e:	81 91       	ld	r24, Z+
 7a0:	5f 01       	movw	r10, r30
 7a2:	b7 01       	movw	r22, r14
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 ed 04 	call	0x9da	; 0x9da <fputc>
 7aa:	31 10       	cpse	r3, r1
 7ac:	3a 94       	dec	r3
 7ae:	f1 e0       	ldi	r31, 0x01	; 1
 7b0:	4f 1a       	sub	r4, r31
 7b2:	51 08       	sbc	r5, r1
 7b4:	41 14       	cp	r4, r1
 7b6:	51 04       	cpc	r5, r1
 7b8:	71 f7       	brne	.-36     	; 0x796 <vfprintf+0x18c>
 7ba:	e5 c0       	rjmp	.+458    	; 0x986 <vfprintf+0x37c>
 7bc:	84 36       	cpi	r24, 0x64	; 100
 7be:	11 f0       	breq	.+4      	; 0x7c4 <vfprintf+0x1ba>
 7c0:	89 36       	cpi	r24, 0x69	; 105
 7c2:	39 f5       	brne	.+78     	; 0x812 <vfprintf+0x208>
 7c4:	f8 01       	movw	r30, r16
 7c6:	27 ff       	sbrs	r18, 7
 7c8:	07 c0       	rjmp	.+14     	; 0x7d8 <vfprintf+0x1ce>
 7ca:	60 81       	ld	r22, Z
 7cc:	71 81       	ldd	r23, Z+1	; 0x01
 7ce:	82 81       	ldd	r24, Z+2	; 0x02
 7d0:	93 81       	ldd	r25, Z+3	; 0x03
 7d2:	0c 5f       	subi	r16, 0xFC	; 252
 7d4:	1f 4f       	sbci	r17, 0xFF	; 255
 7d6:	08 c0       	rjmp	.+16     	; 0x7e8 <vfprintf+0x1de>
 7d8:	60 81       	ld	r22, Z
 7da:	71 81       	ldd	r23, Z+1	; 0x01
 7dc:	07 2e       	mov	r0, r23
 7de:	00 0c       	add	r0, r0
 7e0:	88 0b       	sbc	r24, r24
 7e2:	99 0b       	sbc	r25, r25
 7e4:	0e 5f       	subi	r16, 0xFE	; 254
 7e6:	1f 4f       	sbci	r17, 0xFF	; 255
 7e8:	2f 76       	andi	r18, 0x6F	; 111
 7ea:	72 2e       	mov	r7, r18
 7ec:	97 ff       	sbrs	r25, 7
 7ee:	09 c0       	rjmp	.+18     	; 0x802 <vfprintf+0x1f8>
 7f0:	90 95       	com	r25
 7f2:	80 95       	com	r24
 7f4:	70 95       	com	r23
 7f6:	61 95       	neg	r22
 7f8:	7f 4f       	sbci	r23, 0xFF	; 255
 7fa:	8f 4f       	sbci	r24, 0xFF	; 255
 7fc:	9f 4f       	sbci	r25, 0xFF	; 255
 7fe:	20 68       	ori	r18, 0x80	; 128
 800:	72 2e       	mov	r7, r18
 802:	2a e0       	ldi	r18, 0x0A	; 10
 804:	30 e0       	ldi	r19, 0x00	; 0
 806:	a4 01       	movw	r20, r8
 808:	0e 94 25 05 	call	0xa4a	; 0xa4a <__ultoa_invert>
 80c:	a8 2e       	mov	r10, r24
 80e:	a8 18       	sub	r10, r8
 810:	44 c0       	rjmp	.+136    	; 0x89a <vfprintf+0x290>
 812:	85 37       	cpi	r24, 0x75	; 117
 814:	29 f4       	brne	.+10     	; 0x820 <vfprintf+0x216>
 816:	2f 7e       	andi	r18, 0xEF	; 239
 818:	b2 2e       	mov	r11, r18
 81a:	2a e0       	ldi	r18, 0x0A	; 10
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	25 c0       	rjmp	.+74     	; 0x86a <vfprintf+0x260>
 820:	f2 2f       	mov	r31, r18
 822:	f9 7f       	andi	r31, 0xF9	; 249
 824:	bf 2e       	mov	r11, r31
 826:	8f 36       	cpi	r24, 0x6F	; 111
 828:	c1 f0       	breq	.+48     	; 0x85a <vfprintf+0x250>
 82a:	18 f4       	brcc	.+6      	; 0x832 <vfprintf+0x228>
 82c:	88 35       	cpi	r24, 0x58	; 88
 82e:	79 f0       	breq	.+30     	; 0x84e <vfprintf+0x244>
 830:	b4 c0       	rjmp	.+360    	; 0x99a <vfprintf+0x390>
 832:	80 37       	cpi	r24, 0x70	; 112
 834:	19 f0       	breq	.+6      	; 0x83c <vfprintf+0x232>
 836:	88 37       	cpi	r24, 0x78	; 120
 838:	21 f0       	breq	.+8      	; 0x842 <vfprintf+0x238>
 83a:	af c0       	rjmp	.+350    	; 0x99a <vfprintf+0x390>
 83c:	2f 2f       	mov	r18, r31
 83e:	20 61       	ori	r18, 0x10	; 16
 840:	b2 2e       	mov	r11, r18
 842:	b4 fe       	sbrs	r11, 4
 844:	0d c0       	rjmp	.+26     	; 0x860 <vfprintf+0x256>
 846:	8b 2d       	mov	r24, r11
 848:	84 60       	ori	r24, 0x04	; 4
 84a:	b8 2e       	mov	r11, r24
 84c:	09 c0       	rjmp	.+18     	; 0x860 <vfprintf+0x256>
 84e:	24 ff       	sbrs	r18, 4
 850:	0a c0       	rjmp	.+20     	; 0x866 <vfprintf+0x25c>
 852:	9f 2f       	mov	r25, r31
 854:	96 60       	ori	r25, 0x06	; 6
 856:	b9 2e       	mov	r11, r25
 858:	06 c0       	rjmp	.+12     	; 0x866 <vfprintf+0x25c>
 85a:	28 e0       	ldi	r18, 0x08	; 8
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	05 c0       	rjmp	.+10     	; 0x86a <vfprintf+0x260>
 860:	20 e1       	ldi	r18, 0x10	; 16
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	02 c0       	rjmp	.+4      	; 0x86a <vfprintf+0x260>
 866:	20 e1       	ldi	r18, 0x10	; 16
 868:	32 e0       	ldi	r19, 0x02	; 2
 86a:	f8 01       	movw	r30, r16
 86c:	b7 fe       	sbrs	r11, 7
 86e:	07 c0       	rjmp	.+14     	; 0x87e <vfprintf+0x274>
 870:	60 81       	ld	r22, Z
 872:	71 81       	ldd	r23, Z+1	; 0x01
 874:	82 81       	ldd	r24, Z+2	; 0x02
 876:	93 81       	ldd	r25, Z+3	; 0x03
 878:	0c 5f       	subi	r16, 0xFC	; 252
 87a:	1f 4f       	sbci	r17, 0xFF	; 255
 87c:	06 c0       	rjmp	.+12     	; 0x88a <vfprintf+0x280>
 87e:	60 81       	ld	r22, Z
 880:	71 81       	ldd	r23, Z+1	; 0x01
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 5f       	subi	r16, 0xFE	; 254
 888:	1f 4f       	sbci	r17, 0xFF	; 255
 88a:	a4 01       	movw	r20, r8
 88c:	0e 94 25 05 	call	0xa4a	; 0xa4a <__ultoa_invert>
 890:	a8 2e       	mov	r10, r24
 892:	a8 18       	sub	r10, r8
 894:	fb 2d       	mov	r31, r11
 896:	ff 77       	andi	r31, 0x7F	; 127
 898:	7f 2e       	mov	r7, r31
 89a:	76 fe       	sbrs	r7, 6
 89c:	0b c0       	rjmp	.+22     	; 0x8b4 <vfprintf+0x2aa>
 89e:	37 2d       	mov	r19, r7
 8a0:	3e 7f       	andi	r19, 0xFE	; 254
 8a2:	a5 14       	cp	r10, r5
 8a4:	50 f4       	brcc	.+20     	; 0x8ba <vfprintf+0x2b0>
 8a6:	74 fe       	sbrs	r7, 4
 8a8:	0a c0       	rjmp	.+20     	; 0x8be <vfprintf+0x2b4>
 8aa:	72 fc       	sbrc	r7, 2
 8ac:	08 c0       	rjmp	.+16     	; 0x8be <vfprintf+0x2b4>
 8ae:	37 2d       	mov	r19, r7
 8b0:	3e 7e       	andi	r19, 0xEE	; 238
 8b2:	05 c0       	rjmp	.+10     	; 0x8be <vfprintf+0x2b4>
 8b4:	ba 2c       	mov	r11, r10
 8b6:	37 2d       	mov	r19, r7
 8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <vfprintf+0x2b6>
 8ba:	ba 2c       	mov	r11, r10
 8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <vfprintf+0x2b6>
 8be:	b5 2c       	mov	r11, r5
 8c0:	34 ff       	sbrs	r19, 4
 8c2:	0d c0       	rjmp	.+26     	; 0x8de <vfprintf+0x2d4>
 8c4:	fe 01       	movw	r30, r28
 8c6:	ea 0d       	add	r30, r10
 8c8:	f1 1d       	adc	r31, r1
 8ca:	80 81       	ld	r24, Z
 8cc:	80 33       	cpi	r24, 0x30	; 48
 8ce:	11 f4       	brne	.+4      	; 0x8d4 <vfprintf+0x2ca>
 8d0:	39 7e       	andi	r19, 0xE9	; 233
 8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <vfprintf+0x2dc>
 8d4:	32 ff       	sbrs	r19, 2
 8d6:	06 c0       	rjmp	.+12     	; 0x8e4 <vfprintf+0x2da>
 8d8:	b3 94       	inc	r11
 8da:	b3 94       	inc	r11
 8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <vfprintf+0x2dc>
 8de:	83 2f       	mov	r24, r19
 8e0:	86 78       	andi	r24, 0x86	; 134
 8e2:	09 f0       	breq	.+2      	; 0x8e6 <vfprintf+0x2dc>
 8e4:	b3 94       	inc	r11
 8e6:	33 fd       	sbrc	r19, 3
 8e8:	13 c0       	rjmp	.+38     	; 0x910 <vfprintf+0x306>
 8ea:	30 ff       	sbrs	r19, 0
 8ec:	06 c0       	rjmp	.+12     	; 0x8fa <vfprintf+0x2f0>
 8ee:	5a 2c       	mov	r5, r10
 8f0:	b3 14       	cp	r11, r3
 8f2:	18 f4       	brcc	.+6      	; 0x8fa <vfprintf+0x2f0>
 8f4:	53 0c       	add	r5, r3
 8f6:	5b 18       	sub	r5, r11
 8f8:	b3 2c       	mov	r11, r3
 8fa:	b3 14       	cp	r11, r3
 8fc:	68 f4       	brcc	.+26     	; 0x918 <vfprintf+0x30e>
 8fe:	b7 01       	movw	r22, r14
 900:	80 e2       	ldi	r24, 0x20	; 32
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	3c 87       	std	Y+12, r19	; 0x0c
 906:	0e 94 ed 04 	call	0x9da	; 0x9da <fputc>
 90a:	b3 94       	inc	r11
 90c:	3c 85       	ldd	r19, Y+12	; 0x0c
 90e:	f5 cf       	rjmp	.-22     	; 0x8fa <vfprintf+0x2f0>
 910:	b3 14       	cp	r11, r3
 912:	10 f4       	brcc	.+4      	; 0x918 <vfprintf+0x30e>
 914:	3b 18       	sub	r3, r11
 916:	01 c0       	rjmp	.+2      	; 0x91a <vfprintf+0x310>
 918:	31 2c       	mov	r3, r1
 91a:	34 ff       	sbrs	r19, 4
 91c:	12 c0       	rjmp	.+36     	; 0x942 <vfprintf+0x338>
 91e:	b7 01       	movw	r22, r14
 920:	80 e3       	ldi	r24, 0x30	; 48
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	3c 87       	std	Y+12, r19	; 0x0c
 926:	0e 94 ed 04 	call	0x9da	; 0x9da <fputc>
 92a:	3c 85       	ldd	r19, Y+12	; 0x0c
 92c:	32 ff       	sbrs	r19, 2
 92e:	17 c0       	rjmp	.+46     	; 0x95e <vfprintf+0x354>
 930:	31 fd       	sbrc	r19, 1
 932:	03 c0       	rjmp	.+6      	; 0x93a <vfprintf+0x330>
 934:	88 e7       	ldi	r24, 0x78	; 120
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	02 c0       	rjmp	.+4      	; 0x93e <vfprintf+0x334>
 93a:	88 e5       	ldi	r24, 0x58	; 88
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	b7 01       	movw	r22, r14
 940:	0c c0       	rjmp	.+24     	; 0x95a <vfprintf+0x350>
 942:	83 2f       	mov	r24, r19
 944:	86 78       	andi	r24, 0x86	; 134
 946:	59 f0       	breq	.+22     	; 0x95e <vfprintf+0x354>
 948:	31 ff       	sbrs	r19, 1
 94a:	02 c0       	rjmp	.+4      	; 0x950 <vfprintf+0x346>
 94c:	8b e2       	ldi	r24, 0x2B	; 43
 94e:	01 c0       	rjmp	.+2      	; 0x952 <vfprintf+0x348>
 950:	80 e2       	ldi	r24, 0x20	; 32
 952:	37 fd       	sbrc	r19, 7
 954:	8d e2       	ldi	r24, 0x2D	; 45
 956:	b7 01       	movw	r22, r14
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	0e 94 ed 04 	call	0x9da	; 0x9da <fputc>
 95e:	a5 14       	cp	r10, r5
 960:	38 f4       	brcc	.+14     	; 0x970 <vfprintf+0x366>
 962:	b7 01       	movw	r22, r14
 964:	80 e3       	ldi	r24, 0x30	; 48
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	0e 94 ed 04 	call	0x9da	; 0x9da <fputc>
 96c:	5a 94       	dec	r5
 96e:	f7 cf       	rjmp	.-18     	; 0x95e <vfprintf+0x354>
 970:	aa 94       	dec	r10
 972:	f4 01       	movw	r30, r8
 974:	ea 0d       	add	r30, r10
 976:	f1 1d       	adc	r31, r1
 978:	80 81       	ld	r24, Z
 97a:	b7 01       	movw	r22, r14
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	0e 94 ed 04 	call	0x9da	; 0x9da <fputc>
 982:	a1 10       	cpse	r10, r1
 984:	f5 cf       	rjmp	.-22     	; 0x970 <vfprintf+0x366>
 986:	33 20       	and	r3, r3
 988:	09 f4       	brne	.+2      	; 0x98c <vfprintf+0x382>
 98a:	51 ce       	rjmp	.-862    	; 0x62e <vfprintf+0x24>
 98c:	b7 01       	movw	r22, r14
 98e:	80 e2       	ldi	r24, 0x20	; 32
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 ed 04 	call	0x9da	; 0x9da <fputc>
 996:	3a 94       	dec	r3
 998:	f6 cf       	rjmp	.-20     	; 0x986 <vfprintf+0x37c>
 99a:	f7 01       	movw	r30, r14
 99c:	86 81       	ldd	r24, Z+6	; 0x06
 99e:	97 81       	ldd	r25, Z+7	; 0x07
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <vfprintf+0x39c>
 9a2:	8f ef       	ldi	r24, 0xFF	; 255
 9a4:	9f ef       	ldi	r25, 0xFF	; 255
 9a6:	2c 96       	adiw	r28, 0x0c	; 12
 9a8:	e2 e1       	ldi	r30, 0x12	; 18
 9aa:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__epilogue_restores__>

000009ae <strnlen_P>:
 9ae:	fc 01       	movw	r30, r24
 9b0:	05 90       	lpm	r0, Z+
 9b2:	61 50       	subi	r22, 0x01	; 1
 9b4:	70 40       	sbci	r23, 0x00	; 0
 9b6:	01 10       	cpse	r0, r1
 9b8:	d8 f7       	brcc	.-10     	; 0x9b0 <strnlen_P+0x2>
 9ba:	80 95       	com	r24
 9bc:	90 95       	com	r25
 9be:	8e 0f       	add	r24, r30
 9c0:	9f 1f       	adc	r25, r31
 9c2:	08 95       	ret

000009c4 <strnlen>:
 9c4:	fc 01       	movw	r30, r24
 9c6:	61 50       	subi	r22, 0x01	; 1
 9c8:	70 40       	sbci	r23, 0x00	; 0
 9ca:	01 90       	ld	r0, Z+
 9cc:	01 10       	cpse	r0, r1
 9ce:	d8 f7       	brcc	.-10     	; 0x9c6 <strnlen+0x2>
 9d0:	80 95       	com	r24
 9d2:	90 95       	com	r25
 9d4:	8e 0f       	add	r24, r30
 9d6:	9f 1f       	adc	r25, r31
 9d8:	08 95       	ret

000009da <fputc>:
 9da:	0f 93       	push	r16
 9dc:	1f 93       	push	r17
 9de:	cf 93       	push	r28
 9e0:	df 93       	push	r29
 9e2:	fb 01       	movw	r30, r22
 9e4:	23 81       	ldd	r18, Z+3	; 0x03
 9e6:	21 fd       	sbrc	r18, 1
 9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <fputc+0x16>
 9ea:	8f ef       	ldi	r24, 0xFF	; 255
 9ec:	9f ef       	ldi	r25, 0xFF	; 255
 9ee:	28 c0       	rjmp	.+80     	; 0xa40 <fputc+0x66>
 9f0:	22 ff       	sbrs	r18, 2
 9f2:	16 c0       	rjmp	.+44     	; 0xa20 <fputc+0x46>
 9f4:	46 81       	ldd	r20, Z+6	; 0x06
 9f6:	57 81       	ldd	r21, Z+7	; 0x07
 9f8:	24 81       	ldd	r18, Z+4	; 0x04
 9fa:	35 81       	ldd	r19, Z+5	; 0x05
 9fc:	42 17       	cp	r20, r18
 9fe:	53 07       	cpc	r21, r19
 a00:	44 f4       	brge	.+16     	; 0xa12 <fputc+0x38>
 a02:	a0 81       	ld	r26, Z
 a04:	b1 81       	ldd	r27, Z+1	; 0x01
 a06:	9d 01       	movw	r18, r26
 a08:	2f 5f       	subi	r18, 0xFF	; 255
 a0a:	3f 4f       	sbci	r19, 0xFF	; 255
 a0c:	31 83       	std	Z+1, r19	; 0x01
 a0e:	20 83       	st	Z, r18
 a10:	8c 93       	st	X, r24
 a12:	26 81       	ldd	r18, Z+6	; 0x06
 a14:	37 81       	ldd	r19, Z+7	; 0x07
 a16:	2f 5f       	subi	r18, 0xFF	; 255
 a18:	3f 4f       	sbci	r19, 0xFF	; 255
 a1a:	37 83       	std	Z+7, r19	; 0x07
 a1c:	26 83       	std	Z+6, r18	; 0x06
 a1e:	10 c0       	rjmp	.+32     	; 0xa40 <fputc+0x66>
 a20:	eb 01       	movw	r28, r22
 a22:	09 2f       	mov	r16, r25
 a24:	18 2f       	mov	r17, r24
 a26:	00 84       	ldd	r0, Z+8	; 0x08
 a28:	f1 85       	ldd	r31, Z+9	; 0x09
 a2a:	e0 2d       	mov	r30, r0
 a2c:	09 95       	icall
 a2e:	89 2b       	or	r24, r25
 a30:	e1 f6       	brne	.-72     	; 0x9ea <fputc+0x10>
 a32:	8e 81       	ldd	r24, Y+6	; 0x06
 a34:	9f 81       	ldd	r25, Y+7	; 0x07
 a36:	01 96       	adiw	r24, 0x01	; 1
 a38:	9f 83       	std	Y+7, r25	; 0x07
 a3a:	8e 83       	std	Y+6, r24	; 0x06
 a3c:	81 2f       	mov	r24, r17
 a3e:	90 2f       	mov	r25, r16
 a40:	df 91       	pop	r29
 a42:	cf 91       	pop	r28
 a44:	1f 91       	pop	r17
 a46:	0f 91       	pop	r16
 a48:	08 95       	ret

00000a4a <__ultoa_invert>:
 a4a:	fa 01       	movw	r30, r20
 a4c:	aa 27       	eor	r26, r26
 a4e:	28 30       	cpi	r18, 0x08	; 8
 a50:	51 f1       	breq	.+84     	; 0xaa6 <__ultoa_invert+0x5c>
 a52:	20 31       	cpi	r18, 0x10	; 16
 a54:	81 f1       	breq	.+96     	; 0xab6 <__ultoa_invert+0x6c>
 a56:	e8 94       	clt
 a58:	6f 93       	push	r22
 a5a:	6e 7f       	andi	r22, 0xFE	; 254
 a5c:	6e 5f       	subi	r22, 0xFE	; 254
 a5e:	7f 4f       	sbci	r23, 0xFF	; 255
 a60:	8f 4f       	sbci	r24, 0xFF	; 255
 a62:	9f 4f       	sbci	r25, 0xFF	; 255
 a64:	af 4f       	sbci	r26, 0xFF	; 255
 a66:	b1 e0       	ldi	r27, 0x01	; 1
 a68:	3e d0       	rcall	.+124    	; 0xae6 <__ultoa_invert+0x9c>
 a6a:	b4 e0       	ldi	r27, 0x04	; 4
 a6c:	3c d0       	rcall	.+120    	; 0xae6 <__ultoa_invert+0x9c>
 a6e:	67 0f       	add	r22, r23
 a70:	78 1f       	adc	r23, r24
 a72:	89 1f       	adc	r24, r25
 a74:	9a 1f       	adc	r25, r26
 a76:	a1 1d       	adc	r26, r1
 a78:	68 0f       	add	r22, r24
 a7a:	79 1f       	adc	r23, r25
 a7c:	8a 1f       	adc	r24, r26
 a7e:	91 1d       	adc	r25, r1
 a80:	a1 1d       	adc	r26, r1
 a82:	6a 0f       	add	r22, r26
 a84:	71 1d       	adc	r23, r1
 a86:	81 1d       	adc	r24, r1
 a88:	91 1d       	adc	r25, r1
 a8a:	a1 1d       	adc	r26, r1
 a8c:	20 d0       	rcall	.+64     	; 0xace <__ultoa_invert+0x84>
 a8e:	09 f4       	brne	.+2      	; 0xa92 <__ultoa_invert+0x48>
 a90:	68 94       	set
 a92:	3f 91       	pop	r19
 a94:	2a e0       	ldi	r18, 0x0A	; 10
 a96:	26 9f       	mul	r18, r22
 a98:	11 24       	eor	r1, r1
 a9a:	30 19       	sub	r19, r0
 a9c:	30 5d       	subi	r19, 0xD0	; 208
 a9e:	31 93       	st	Z+, r19
 aa0:	de f6       	brtc	.-74     	; 0xa58 <__ultoa_invert+0xe>
 aa2:	cf 01       	movw	r24, r30
 aa4:	08 95       	ret
 aa6:	46 2f       	mov	r20, r22
 aa8:	47 70       	andi	r20, 0x07	; 7
 aaa:	40 5d       	subi	r20, 0xD0	; 208
 aac:	41 93       	st	Z+, r20
 aae:	b3 e0       	ldi	r27, 0x03	; 3
 ab0:	0f d0       	rcall	.+30     	; 0xad0 <__ultoa_invert+0x86>
 ab2:	c9 f7       	brne	.-14     	; 0xaa6 <__ultoa_invert+0x5c>
 ab4:	f6 cf       	rjmp	.-20     	; 0xaa2 <__ultoa_invert+0x58>
 ab6:	46 2f       	mov	r20, r22
 ab8:	4f 70       	andi	r20, 0x0F	; 15
 aba:	40 5d       	subi	r20, 0xD0	; 208
 abc:	4a 33       	cpi	r20, 0x3A	; 58
 abe:	18 f0       	brcs	.+6      	; 0xac6 <__ultoa_invert+0x7c>
 ac0:	49 5d       	subi	r20, 0xD9	; 217
 ac2:	31 fd       	sbrc	r19, 1
 ac4:	40 52       	subi	r20, 0x20	; 32
 ac6:	41 93       	st	Z+, r20
 ac8:	02 d0       	rcall	.+4      	; 0xace <__ultoa_invert+0x84>
 aca:	a9 f7       	brne	.-22     	; 0xab6 <__ultoa_invert+0x6c>
 acc:	ea cf       	rjmp	.-44     	; 0xaa2 <__ultoa_invert+0x58>
 ace:	b4 e0       	ldi	r27, 0x04	; 4
 ad0:	a6 95       	lsr	r26
 ad2:	97 95       	ror	r25
 ad4:	87 95       	ror	r24
 ad6:	77 95       	ror	r23
 ad8:	67 95       	ror	r22
 ada:	ba 95       	dec	r27
 adc:	c9 f7       	brne	.-14     	; 0xad0 <__ultoa_invert+0x86>
 ade:	00 97       	sbiw	r24, 0x00	; 0
 ae0:	61 05       	cpc	r22, r1
 ae2:	71 05       	cpc	r23, r1
 ae4:	08 95       	ret
 ae6:	9b 01       	movw	r18, r22
 ae8:	ac 01       	movw	r20, r24
 aea:	0a 2e       	mov	r0, r26
 aec:	06 94       	lsr	r0
 aee:	57 95       	ror	r21
 af0:	47 95       	ror	r20
 af2:	37 95       	ror	r19
 af4:	27 95       	ror	r18
 af6:	ba 95       	dec	r27
 af8:	c9 f7       	brne	.-14     	; 0xaec <__ultoa_invert+0xa2>
 afa:	62 0f       	add	r22, r18
 afc:	73 1f       	adc	r23, r19
 afe:	84 1f       	adc	r24, r20
 b00:	95 1f       	adc	r25, r21
 b02:	a0 1d       	adc	r26, r0
 b04:	08 95       	ret

00000b06 <__prologue_saves__>:
 b06:	2f 92       	push	r2
 b08:	3f 92       	push	r3
 b0a:	4f 92       	push	r4
 b0c:	5f 92       	push	r5
 b0e:	6f 92       	push	r6
 b10:	7f 92       	push	r7
 b12:	8f 92       	push	r8
 b14:	9f 92       	push	r9
 b16:	af 92       	push	r10
 b18:	bf 92       	push	r11
 b1a:	cf 92       	push	r12
 b1c:	df 92       	push	r13
 b1e:	ef 92       	push	r14
 b20:	ff 92       	push	r15
 b22:	0f 93       	push	r16
 b24:	1f 93       	push	r17
 b26:	cf 93       	push	r28
 b28:	df 93       	push	r29
 b2a:	cd b7       	in	r28, 0x3d	; 61
 b2c:	de b7       	in	r29, 0x3e	; 62
 b2e:	ca 1b       	sub	r28, r26
 b30:	db 0b       	sbc	r29, r27
 b32:	0f b6       	in	r0, 0x3f	; 63
 b34:	f8 94       	cli
 b36:	de bf       	out	0x3e, r29	; 62
 b38:	0f be       	out	0x3f, r0	; 63
 b3a:	cd bf       	out	0x3d, r28	; 61
 b3c:	09 94       	ijmp

00000b3e <__epilogue_restores__>:
 b3e:	2a 88       	ldd	r2, Y+18	; 0x12
 b40:	39 88       	ldd	r3, Y+17	; 0x11
 b42:	48 88       	ldd	r4, Y+16	; 0x10
 b44:	5f 84       	ldd	r5, Y+15	; 0x0f
 b46:	6e 84       	ldd	r6, Y+14	; 0x0e
 b48:	7d 84       	ldd	r7, Y+13	; 0x0d
 b4a:	8c 84       	ldd	r8, Y+12	; 0x0c
 b4c:	9b 84       	ldd	r9, Y+11	; 0x0b
 b4e:	aa 84       	ldd	r10, Y+10	; 0x0a
 b50:	b9 84       	ldd	r11, Y+9	; 0x09
 b52:	c8 84       	ldd	r12, Y+8	; 0x08
 b54:	df 80       	ldd	r13, Y+7	; 0x07
 b56:	ee 80       	ldd	r14, Y+6	; 0x06
 b58:	fd 80       	ldd	r15, Y+5	; 0x05
 b5a:	0c 81       	ldd	r16, Y+4	; 0x04
 b5c:	1b 81       	ldd	r17, Y+3	; 0x03
 b5e:	aa 81       	ldd	r26, Y+2	; 0x02
 b60:	b9 81       	ldd	r27, Y+1	; 0x01
 b62:	ce 0f       	add	r28, r30
 b64:	d1 1d       	adc	r29, r1
 b66:	0f b6       	in	r0, 0x3f	; 63
 b68:	f8 94       	cli
 b6a:	de bf       	out	0x3e, r29	; 62
 b6c:	0f be       	out	0x3f, r0	; 63
 b6e:	cd bf       	out	0x3d, r28	; 61
 b70:	ed 01       	movw	r28, r26
 b72:	08 95       	ret

00000b74 <_exit>:
 b74:	f8 94       	cli

00000b76 <__stop_program>:
 b76:	ff cf       	rjmp	.-2      	; 0xb76 <__stop_program>
